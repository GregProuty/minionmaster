{"version":3,"sources":["logo.png","Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Wrapper","styled","div","Button","input","Label","label","Select","select","Dropdown","DropdownWrapper","Center","SelectWrapper","Text","p","CheckBoxWrapper","Form","getResult","useState","bonus","setBonus","ac","setAc","minions","setMinions","dmgDie","setDmgDie","dmgBonus","setDmgBonus","critRange","setCritRange","critMultiplier","setCritMultiplier","twentyAlwaysHits","setTwentyAlwaysHits","targetConcealment","setTargetConcealment","className","onSubmit","e","preventDefault","onChange","target","value","type","name","Body","Img","img","Flex","CenterWrapper","h3","DmgRoll","Crit","BoxWrapper","Box","critRangeMap","1","2","3","App","totalDmg","setTotalDmg","hits","setHits","dmgRolls","setDmgRolls","src","logo","times","result","i","roll","Math","ceil","random","d20","Number","dmgRoll","includes","push","String","map","key","split","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f32e2181.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.095c342d.png\";","import React, { useState } from 'react'\nimport './App.css'\nimport styled from 'styled-components'\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    justify-content: center;\n`\nconst Button = styled.input`\n    width: 8em;\n    height: 4em;\n    // background-color: blue;\n`\nconst Label = styled.label`\n    margin: 1em;\n`\nconst Select = styled.select`\n    width: 5em;\n`\nconst Dropdown = styled.select`\n  width: 10em;\n  height: 3em;\n`\nconst DropdownWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: baseline;\n  justify-content: space-between;\n  width: 80%;\n  margin-left: 2em;\n`\nconst Center = styled.div`\n  width: 100%\n`\nconst SelectWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  width: 60%;\n  margin-left: 20%;\n`\nconst Text = styled.p`\n  width: 10em;\n`\nconst CheckBoxWrapper = styled.div`\n  margin-bottom: 1em;\n`\nconst Form = ({ getResult }) => {\n  const [bonus, setBonus] = useState(0)\n  const [ac, setAc] = useState(0)\n  const [minions, setMinions] = useState(0)\n  const [dmgDie, setDmgDie] = useState('8')\n  const [dmgBonus, setDmgBonus] = useState(0)\n  const [critRange, setCritRange] = useState('1')\n  const [critMultiplier, setCritMultiplier] = useState('3')\n  const [twentyAlwaysHits, setTwentyAlwaysHits] = useState(false)\n  const [targetConcealment, setTargetConcealment] = useState('1')\n\n  return (\n    <div className='Form'>\n      <form onSubmit={e => {\n        e.preventDefault()\n        getResult(bonus, ac, minions, dmgDie, dmgBonus, critRange, critMultiplier, twentyAlwaysHits, targetConcealment)\n      }}\n      >\n        <Wrapper>\n          <Label onChange={e => setBonus(e.target.value)}>\n            Attack Bonus: <input type='number' name='bonus' />\n          </Label>\n          <Center>\n            <SelectWrapper>\n              <Text>Base Damage:</Text>\n              <Select\n                value={dmgDie}\n                onChange={e => setDmgDie(e.target.value)}\n              >\n                <option value='4'>d4</option>\n                <option value='6'>d6</option>\n                <option value='8'>d8</option>\n                <option value='10'>d10</option>\n                <option value='12'>d12</option>\n              </Select>\n            </SelectWrapper>\n          </Center>\n          <Center>\n            <SelectWrapper>\n              <Text>Threat Range:</Text>\n              <Select\n                value={critRange}\n                onChange={e => setCritRange(e.target.value)}\n              >\n                <option value='1'>20</option>\n                <option value='2'>19-20</option>\n                <option value='3'>18-20</option>\n              </Select>\n            </SelectWrapper>\n          </Center>\n          <Center>\n            <SelectWrapper>\n              <Text>Crit Multiplier:</Text>\n              <Select\n                value={critMultiplier}\n                onChange={e => setCritMultiplier(e.target.value)}\n              >\n                <option value='2'>x2</option>\n                <option value='3'>x3</option>\n                <option value='4'>x4</option>\n              </Select>\n            </SelectWrapper>\n          </Center>\n          <Label onChange={e => setDmgBonus(e.target.value)}>\n            Damage Bonus: <input type='number' name='dmgBonus' />\n          </Label>\n          <Label onChange={e => setAc(e.target.value)}>\n            Target AC: <input type='number' name='ac' />\n          </Label>\n          <Center>\n            <DropdownWrapper>\n              <Text>Target concealment:</Text>\n              <Dropdown\n                value={targetConcealment}\n                onChange={e => setTargetConcealment(e.target.value)}\n              >\n                <option value='1'>None</option>\n                <option value='2'>Concealment</option>\n                <option value='3'>Total Concealment</option>\n              </Dropdown>\n            </DropdownWrapper>\n          </Center>\n          <Label onChange={e => setMinions(e.target.value)}>\n            Number of Minions: <input type='number' name='minions' />\n          </Label>\n          <CheckBoxWrapper>\n            <label>20s Always Hit:</label>\n            <input\n              type='checkbox' value={twentyAlwaysHits} onChange={e =>\n                setTwentyAlwaysHits(!twentyAlwaysHits)}\n            />\n          </CheckBoxWrapper>\n          <Center>\n            <Button type='submit' value='Roll' />\n          </Center>\n\n        </Wrapper>\n      </form>\n\n    </div>\n  )\n}\n\nexport default Form\n","import React, { useState } from 'react'\nimport './App.css'\nimport Form from './Form'\nimport styled from 'styled-components'\nimport logo from './logo.png'\n\nconst Body = styled.div`\n  display: flex;\n  margin-top: 0.5em;\n  justify-content: center;\n`\nconst Img = styled.img`\n  width: 6em;\n`\nconst Flex = styled.div`\n  display: flex;\n  align-items: baseline;\n  justify-content: center;\n`\nconst Center = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  width: 50%;\n`\nconst CenterWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n`\nconst Text = styled.h3`\n  margin-right: 0.5em;\n`\nconst DmgRoll = styled.p`\n  margin-right: 0.25em;\n`\nconst Crit = styled.p`\n  margin-right: 0.25em;\n  color: red;\n  font-weight: bold;\n  font-size: 110%;\n`\nconst BoxWrapper = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n`\nconst Box = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n`\nconst critRangeMap = {\n  1: [20],\n  2: [19, 20],\n  3: [18, 19, 20]\n}\n\nconst roll = (bonus, ac, times, dmgDie, dmgBonus, critRange, critMultiplier, twentyAlwaysHits, targetConcealment) => {\n  let totalDmg = 0\n  let hits = 0\n  const dmgRolls = []\n  for (let i = 0; i < times; i++) {\n    const roll = Math.ceil(Math.random() * 20)\n    const d20 = roll + Number(bonus)\n    const dmgRoll = Math.ceil(Math.random() * Number(dmgDie)) + Number(dmgBonus)\n\n    if (targetConcealment === '1' || (targetConcealment === '2' && Math.ceil(Math.random() * 5) !== 5) || (targetConcealment === '3' && Math.ceil(Math.random() * 2) === 2)) {\n      // If Crit:\n      if (critRangeMap[Number(critRange)].includes(roll) && critRangeMap[Number(critRange)].includes(Math.ceil(Math.random() * 20))) {\n        dmgRolls.push('crit' + (dmgRoll * Number(critMultiplier)))\n        totalDmg += (dmgRoll * Number(critMultiplier))\n        hits++\n      } else if (d20 >= ac || (twentyAlwaysHits && roll === 20)) {\n        dmgRolls.push(String(dmgRoll))\n        totalDmg += Number(dmgRoll)\n        hits++\n      }\n    }\n  }\n  return [totalDmg, hits, dmgRolls]\n}\nconst App = () => {\n  const [totalDmg, setTotalDmg] = useState('')\n  const [hits, setHits] = useState('')\n  const [dmgRolls, setDmgRolls] = useState([])\n\n  const getResult = (bonus, ac, times, dmgDie, dmgBonus, critRange, critMultiplier, twentyAlwaysHits, targetConcealment) => {\n    const result = roll(bonus, ac, times, dmgDie, dmgBonus, critRange, critMultiplier, twentyAlwaysHits, targetConcealment)\n\n    setTotalDmg(result[0])\n    setHits(result[1])\n    setDmgRolls(result[2])\n  }\n  return (\n    <div className='App'>\n      <h1>Minion Master</h1>\n      <Img src={logo} />\n      <Body>\n        <Form getResult={getResult} />\n      </Body>\n      <CenterWrapper>\n        {totalDmg !== ''\n          ? totalDmg === 0\n            ? <Crit>COMPLETE MISS</Crit>\n            : <Center>\n              <Flex>\n                <Text>Total Damage:</Text>\n                <p>{totalDmg}</p>\n              </Flex>\n              <Flex>\n                <Text>Hits:</Text>\n                <p>{hits}</p>\n              </Flex>\n              <Text>Damage Rolls:</Text>\n              <BoxWrapper>\n                <Box>\n                  {dmgRolls.map((roll, key) => {\n                    if (roll.includes('crit')) {\n                      roll = roll.split('crit')[1]\n                      return <Crit>{roll}</Crit>\n                    }\n                    return <DmgRoll key={key}>{roll}</DmgRoll>\n                  })}\n                </Box>\n              </BoxWrapper>\n              </Center>\n          : null}\n      </CenterWrapper>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}