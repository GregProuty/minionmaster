{"version":3,"sources":["Form.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","Button","input","Label","label","Select","select","Center","Form","getResult","useState","bonus","setBonus","ac","setAc","minions","setMinions","dmgDie","setDmgDie","dmgBonus","setDmgBonus","className","onSubmit","e","preventDefault","onChange","target","value","type","name","Body","App","result","setResult","times","totalDmg","hits","dmgRolls","i","Math","ceil","random","Number","dmgRoll","push","console","log","join","roll","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4ec12698.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport './App.css'\nimport styled from 'styled-components'\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    justify-content: center;\n`\nconst Button = styled.input`\n    width: 5em;\n`\nconst Label = styled.label`\n    margin: 1em;\n`\nconst Select = styled.select`\n    width: 5em;\n`\nconst Center = styled.div`\n    width: 100%\n`\nconst Form = ({ getResult }) => {\n  const [bonus, setBonus] = useState(0)\n  const [ac, setAc] = useState(0)\n  const [minions, setMinions] = useState(0)\n  const [dmgDie, setDmgDie] = useState('8')\n  const [dmgBonus, setDmgBonus] = useState(0)\n\n  return (\n    <div className='Form'>\n      <form onSubmit={e => {\n        e.preventDefault()\n        getResult(bonus, ac, minions, dmgDie, dmgBonus)\n      }}\n      >\n        <Wrapper>\n          <Label onChange={e => setBonus(e.target.value)}>\n                        Attack Bonus: <input type='number' name='bonus' />\n          </Label>\n          <Center>\n            <Select\n              value={dmgDie}\n              onChange={e => setDmgDie(e.target.value)}\n            >\n              <option value='4'>d4</option>\n              <option value='6'>d6</option>\n              <option value='8'>d8</option>\n              <option value='10'>d10</option>\n              <option value='12'>d12</option>\n            </Select>\n          </Center>\n\n          <Label onChange={e => setDmgBonus(e.target.value)}>\n                        Damage bonus: <input type='number' name='dmgBonus' />\n          </Label>\n          <Label onChange={e => setAc(e.target.value)}>\n                        Target AC: <input type='number' name='ac' />\n          </Label>\n          <Label onChange={e => setMinions(e.target.value)}>\n                        Number of Minions: <input type='number' name='minions' />\n          </Label>\n          <Center>\n\n            <Button type='submit' value='Submit' />\n          </Center>\n\n        </Wrapper>\n      </form>\n\n    </div>\n  )\n}\n\nexport default Form\n","import React, { useState } from 'react'\nimport './App.css'\nimport Form from './Form'\nimport styled from 'styled-components'\n\nconst Body = styled.div`\n  display: flex;\n  margin-top: 2em;\n  justify-content: center;\n`\nconst roll = (bonus, ac, times, dmgDie, dmgBonus) => {\n  // console.log('??', dmgDie, dmgBonus)\n  let totalDmg = 0\n  let hits = 0\n  const dmgRolls = []\n  for (let i = 0; i < times; i++) {\n    const d20 = Math.ceil(Math.random() * 20) + Number(bonus)\n    if (d20 >= ac) {\n      const dmgRoll = Math.ceil(Math.random() * Number(dmgDie)) + Number(dmgBonus)\n      dmgRolls.push(dmgRoll)\n      totalDmg += dmgRoll\n      hits++\n      console.log(dmgRoll)\n    }\n  }\n  return [`Total Damage: ${totalDmg}`, `Hits: ${hits}`, `DamageRolls: ${dmgRolls.join(' ')}`]\n}\nconst App = () => {\n  const [result, setResult] = useState('')\n\n  const getResult = (bonus, ac, times, dmgDie, dmgBonus) => {\n    setResult(roll(bonus, ac, times, dmgDie, dmgBonus))\n  }\n  return (\n    <div className='App'>\n      <h1>Minion Master</h1>\n      <Body>\n        <Form getResult={getResult} />\n      </Body>\n      {result\n        ? <div>\n          <h3>{result[0]}</h3>\n          <h3>{result[1]}</h3>\n          <h3>{result[2]}</h3>\n        </div>\n        : null}\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}